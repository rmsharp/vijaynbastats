---
title: "NBA Statistics Project"
format: html
---

## Problem Statements

1.	What is the best shooting position for each player?
2.	At what range each player is most likely to score a shot?
3.	Who of these players is the best defender?
4.	On whom of these players would you put the best defender?
5.	Do the efficiency of a shooter and the player defending him correlate?
6.	How are taken and missed shots distributed spatially on the court?

## Description of the Data

This dataset is based on shooting statistics that can be found on [NBA.com](
https://www.nba.com/stats/players/shooting/?Season=2020-21&SeasonType=Playoffs&PerMode=Totals). 
It consists of shots taken by four different players during the 2021 NBA 
Playoffs.

----------------------------------------------------------------------

### Data Dictionary

|Variable |Class     |Description                                                  |       
|:--------|:---------|:------------------------------------------------------------|     
|SHOOTER  |string    |Name of the player taking the shot                           |     
|X        |float     |Horizontal distance of the shot taken from the baseline in feet|     
|Y        |float     |Vertical distance of the shot taken from the baseline in feet  |     
|RANGE    |string    |Radius range of the shot taken from the baseline in feet       |     
|DEFENDER |string    |Name of the player defending the shot                        |     
|SCORE    |string    |'MADE' if shot is scored, else 'MISSED'                      |     

----------------------------------------------------------------------     

### Loading Data 

```{r}
#| label: load-data
#| echo: true
library(vijaynbastats)
suppressMessages(library(dplyr))
library(ggplot2)
suppressMessages(library(here))
library(kableExtra)
library(knitr)

nba_players_shooting <- read.csv(here::here("data/nba_players_shooting.csv"))
shots <- nba_players_shooting # shortened version and will be augmented
```

There are `r nrow(shots)` rows and `r ncol(shots)` 
columns (`r get_and_or_list(names(shots))`) in the dataset, which represents
shots taken and defended by four different players (
`r get_and_or_list(sort(unique(nba_players_shooting$SHOOTER)))`).
during the 2021 NBA Playoffs.

### Statistics To Be Used

| Initialism | Definition                                               |
|:-----------|:---------------------------------------------------------|
| _PTS_        | Points scored                                            |
| _FGA_        | Field goals attempted                                    |
| _FTA_        | Free throws attempted                                    |
| _C~FTA~_     | Free throws attempted multiplier (coeficient)            |
| _TS_         | True shooting percentage                                 |
------------------------------------------------------------------------



    1.   Average Shooting Defense (ASD): 1 minus the average shooting 
         success of all players against a specific defender.   
    2.   Expected Shooting (ES): The expected shooting success of a
         player against a specific defender. Equal to 1 minus the defender's
         Average Shooting Defense.
    3.   Shooting Success (SS): The shooting success of a player against a
         specific defender. 
    4.   Weighted Shooting Success (WSS): The shooting success of a player 
         against a specific defender weighted by the number of shots taken 
         against that defender divided by the total number of shots taken by
         the shooter.
    5.   Mean Shooting Success (MSS): The mean of shooting success for a 
         specific shooter. The MSS should be equal to the sum of all WSS for a
         specific shooter.
    6.   Relative Shooting Success (RSS): A measure of how efficient a player is
         at scoring points relative to the expected points scored by an average
         player against the same primary defender. Equal to the player's 
         shooting success divided by the defender's Average Shooting Defense.
    7.   Relative Shooting Success Index (RSSI): A measure of how efficient a 
         player is at scoring points relative to the expected points scored by 
         an average player against the same primary defender. Equal to the 
         player's shooting success divided by the defender's Average Shooting 
         Defense, weighted by the number of shots taken against that defender 
         divided by the total number of shots taken by the shooter.
    5.   True Shooting Percentage (TS) A measure of shooting efficiency 
         that takes into account field goals, 3-point field goals, and free 
         throws. It will be calculated directly from summary statistics 
         provided by the NBA for the same playoffs. It is defined as:   
    
$$
TS = \frac{0.5 * PTS}{FGA + (C_{FTA} * FTA)}
$$

### Pull In Summary Statistics from Basketball Reference

```{r}
#| label: pull-summary-stats
#| echo: true
#| eval: true
players <- sort(unique(shots$SHOOTER))

summary_stats <- read.csv(here::here(
  "inst/extdata/csv_files/2021_nba_playoff_stats.csv"))
summary_stats <- summary_stats[summary_stats$Player %in% players, ]

```
<!--### Playing with Circular Plots -->

```{r}
#| label: where-does-arc-meet-3-ft-line
#| echo: false
#| eval: false
library(plotrix)
 plot(1:25,seq(-25,25,length=25),type="n",xlab="",ylab="",main="Test draw.circle"); draw.circle(0, 5.25, radius = c(23.5, 23.75), nv = 100, border = "purple", col = c("blue", "white"), lty = 1, lwd = 0.25)
 

```
### Adding Distance and Polar Coordinates for Each Shot

Distance is calculated based on the definition of a three-point shot in the NBA.
Thus, distance is calculated from the place of the shot to the center of the 
basket. The court-facing surface of the backboard is 4 feet from the baseline. 
The inside of the circular basket rim is 6 inches from the front of the 
backboard and the circle has an 18 inch diameter. Adding 4 feet, 0.5 feet, and 
9 inches places the center of the basket 5.25 feet from the baseline.

$$
shot\_distance = \sqrt{X^2 + (Y - 5.25)^2}
$$
```{r}
#| label: add-distance
#| echo: true
#| eval: true
#| tbl_cap: "Data with Distance Added"

shots <- shots |>
  mutate(DISTANCE = sqrt(X^2 + abs(Y - 5.25)^2))
points <- integer(length(shots$DISTANCE))
three_point <- logical(length(shots$DISTANCE))
for (i in seq_along(shots$DISTANCE)) {
  points[i] <- get_points(shots$X[i], 
                          shots$Y[i], 
                          shots$SCORE[i])
  three_point[i] <- is_three_point(shots$X[i], 
                                   shots$Y[i])
}
shots$POINTS <- points
shots$THREE_POINT <- three_point

```

#### Make Some Seth Curry Specific Data Objects To Illustrate the Techniques

```{r}
#| label: seth-curry-specific-data
#| echo: true
#| eval: true
sc_threes <- shots[shots$SHOOTER == "Seth Curry", "THREE_POINT"]
sc_points <- shots[shots$SHOOTER == "Seth Curry", "POINTS"]
sc_three_df <- shots[shots$SHOOTER == "Seth Curry" & shots$THREE_POINT == TRUE, 
                     c("X", "Y", "DISTANCE")]
```
```{r}
#| label: tbl-seth-curry-data
#| echo: true
#| eval: true
#| results: "asis"
#| tbl_cap: "Examples of Seth Curry Data"
sc_three_df |>
  mutate_if(is.numeric, format, digits = 1, nsmall = 1) |>
  head(5) |>
  kable()
```


Note that my calculation of what is a three point shot is based on the NBA
rules at https://official.nba.com/rule-no-1-court-dimensions-equipment/ and
the X and Y coordinates of the shots taken. See the function `is_three_point`
for the implementation. However, note the comparison of Seth Curry's shot 
from the official NBA statistics for these games and those classified by the
`is_three_point` function.
(See @sec-is-three-point for the function definition.) 

#### is_three_point.R #sec-is-three-point

```r 
{{< include R/is_three_point.R >}}
```


```{r}
#| label: tbl-compare-seth-curry-shots
#| echo: true
#| eval: true
sc_tbl <- data.frame(
  SOURCE = c("is_three_point()", "Official NBA Stats"),
  FGA = c(length(sc_points), 
          summary_stats$FGA[summary_stats$Player == "Seth Curry"]),
  FG =c(sum(sc_points > 0), 
        summary_stats$FG[summary_stats$Player == "Seth Curry"]),
  X2PA = c((length(sc_points) - sum(sc_threes)), 
           summary_stats$X2PA[summary_stats$Player == "Seth Curry"]),
  X2P = c(sum(ifelse(sc_points == 2, 1, 0)),
          summary_stats$X2P[summary_stats$Player == "Seth Curry"]),
  X3PA = c(sum(sc_threes), 
           summary_stats$X3PA[summary_stats$Player == "Seth Curry"]),
  X3P = c(sum(ifelse(sc_points == 3, 1, 0)),
          summary_stats$X3P[summary_stats$Player == "Seth Curry"])
)
sc_tbl |>
  kable(caption = "Comparison of Seth Curry's Shots")
```

@tbl-compare-seth-curry-shots has Seth Curry with 
`r summary_stats$FGA[summary_stats$Player == "Seth Curry"]` field goal attempts,
`r summary_stats$X3PA[summary_stats$Player == "Seth Curry"]` 
three point attempts, and 
`r summary_stats$X3P[summary_stats$Player == "Seth Curry"]` 
three point shots made. While I have calculated 
`r length(sc_points)` field goal attempts,
`r sum(sc_threes)` three point attempts, and 
`r sum(ifelse(sc_points == 3, 1, 0))` three point shots made. The discrepancy
is made up in the two point shots which have an extra
`r summary_stats$X3PA[summary_stats$Player == "Seth Curry"] - sum(sc_threes)`
shots taken.

```{r}
#| label: fig-curry-shot-locations
#| echo: true
#| eval: true
# Change the point size, and shape
# Assign preferred colors to shot locations
shots <- shots |> 
  mutate(SHOT_COLOR = case_when(
    POINTS == 0 ~ "#00000022",
    POINTS == 2 ~ "#00ff00AA",
    POINTS == 3 ~ "red"
  )
)
ggplot(shots[shots$SHOOTER == "Seth Curry", ], aes(x = X, y = Y)) +
  geom_point(size = 2, col = shots[
    shots$SHOOTER == "Seth Curry", "SHOT_COLOR"])
```

### Calculate True Shooting Percentage


```{r}
#| label: tbl-player-ts
#| echo: true
#| eval: true
#| tbl_cap: "True Shooting Percentage for Each Player During 2021 Playoffs"
players <- sort(unique(shots$SHOOTER))
ts <- numeric(length(players))
for (i in seq_along(players)) {
  player_data <- shots[shots$SHOOTER == players[i], ]
  stats <- summary_stats[summary_stats$Player == players[i], ]
  fta <- stats$FTA
  fga <- stats$FGA
  pts <- stats$PTS
  pts2 <- stats$X2P
  pts3 <- stats$X3P
  ft <- stats$FT
  fta <- stats$FTA
  ts[i] <- true_shooting_percentage(pts = pts, 
                                    fga = fga,
                                    fta = fta)
}
ts_tbl <- data.frame(PLAYER = players, TS = ts, stringsAsFactors = FALSE)
ts_tbl |>
  dplyr::arrange(desc(TS)) |>
  knitr::kable()
```

### Creation of Weighted Shooting Stats

Weighted offensive shooting statistics are calculated by multiplying statistic 
by the 
number of times a specific shooter and defender combination occurs divided by
the total times a specific shooter met any defender. Weighted defensive shooting 
statistics are similarly calculated by multiplying the statistic by the number 
of times a specific defender and shooter combination occurs divided by the total
times a specific defender met any shooter. 
See @tbl-make-weighted-shooting-stats.

```{r}
#| label: make-weighted-shooting-stats
#| echo: true
#| eval: true
library(tidyr)

wt_stats <- function(shots) {
  shooters <- rep(players, each = length(players))
  defenders <- rep(players, length(players))
  deletes <- seq(-1, to = -length(shooters), by = -5)
  shooters <- shooters[deletes]
  defenders <- defenders[deletes]
  stats <- c("FG", "FGA", "X2P", "X2PA", "X3P", "X3PA", "PTS")
  stat_df <- data.frame(shooter = rep(shooters, length(stats)),
                   defender = rep(defenders, length(stats)),
                   stats = rep(stats, each = length(shooters)),
                   stringsAsFactors = FALSE)
  values <- integer(nrow(stat_df))
  for (i in seq_len(nrow(stat_df))) {
    shooter <- stat_df$shooter[i]
    defender <- stat_df$defender[i]
    stat <- stat_df$stats[i]
    values[i] <- case_when(
      stat_df$stats[i] == "FG" ~ sum(shots[shots$SHOOTER == shooter & 
                                     shots$DEFENDER == defender, "POINTS"] > 0),
      stat_df$stats[i] == "FGA" ~ nrow(shots[shots$SHOOTER == shooter & 
                                      shots$DEFENDER == defender, ]),
      stat_df$stats[i] == "X2P" ~ sum(shots[shots$SHOOTER == shooter & 
                                          shots$DEFENDER == defender, "POINTS"] == 2),
      stat_df$stats[i] == "X2PA" ~ nrow(shots[shots$SHOOTER == shooter &
                                       shots$DEFENDER == defender & 
                                       shots$THREE_POINT == FALSE, ]),
      stat_df$stats[i] == "X3P" ~ sum(shots[shots$SHOOTER == shooter & 
                                          shots$DEFENDER == defender, "POINTS"] == 3),
      stat_df$stats[i] == "X3PA" ~ nrow(shots[shots$SHOOTER == shooter &
                                       shots$DEFENDER == defender & 
                                       shots$THREE_POINT, ]),
      stat_df$stats[i] == "PTS" ~ sum(shots[shots$SHOOTER == shooter &
                                     shots$DEFENDER == defender, "POINTS"])
    )

  }
  stat_df$value <- values
  stat_df |>
    pivot_wider(
    names_from = stats,
    values_from = value
  )
}
```
```{r}
#| label: tbl-weights-for-weighted-shooting-stats
#| echo: true
#| eval: true
#| results: 'asis'
#| tbl_cap: "Weights for Weighted Shooting Statistics for Each Player"
wt_stats(shots) |>
  knitr::kable()
```

```


